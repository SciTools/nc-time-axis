[build-system]
# Defined by PEP 518
requires = [
  "setuptools>=61",
  "setuptools_scm[toml]>=7",
  "wheel",
]
# Defined by PEP 517
build-backend = "setuptools.build_meta"

# Defined by PEP 621
[project]
authors = [
  {name = "NCTA Contributors", email = "scitools.pub@gmail.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
]
description = "Provides support for a cftime axis in matplotlib"
dynamic = [
  "dependencies",
  "optional-dependencies",
  "readme",
  "version",
]
keywords = [
  "axis",
  "cftime",
  "matplotlib",
]
license = {text = "BSD-3-Clause"}
name = "nc-time-axis"
requires-python = ">=3.9"

[project.urls]
Code = "https://github.com/SciTools/nc-time-axis"
Discussions = "https://github.com/SciTools/nc-time-axis/discussions"
Issues = "https://github.com/SciTools/nc-time-axis/issues"

[tool.setuptools]
license-files = ["LICENSE"]
zip-safe = false

[tool.setuptools.dynamic]
dependencies = {file = "requirements/pypi-core.txt"}
readme = {file = "README.md", content-type = "text/markdown"}

[tool.setuptools.dynamic.optional-dependencies]
docs = {file = "requirements/pypi-optional-docs.txt"}
test = {file = "requirements/pypi-optional-test.txt"}

[tool.setuptools.packages.find]
include = ["nc_time_axis*"]
where = ["src"]

[tool.pytest.ini_options]
addopts = "-ra -v --doctest-modules"
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS NUMBER"
minversion = "6.0"
testpaths = ["src/nc_time_axis"]

[tool.setuptools_scm]
write_to = "src/nc_time_axis/_version.py"
local_scheme = "dirty-tag"

[tool.check-manifest]
ignore = [
  "src/nc_time_axis/_version.py",
]

[tool.codespell]
ignore-words-list = "assertIn"
skip = ".git,./docs/_build"

[tool.ruff]
line-length = 88

[tool.ruff.format]
preview = false

[tool.ruff.lint]
ignore = [
    # flake8-commas (COM)
    # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "COM812",  # Trailing comma missing.
    "COM819",  # Trailing comma prohibited.

    # flake8-implicit-str-concat (ISC)
    # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
    # NOTE: This rule may cause conflicts when used with "ruff format".
    "ISC001",  # Implicitly concatenate string literals on one line.

    # TODO: exceptions that still need investigating are below.
    # Might be fixable, or might become permanent (above):
    "PLR5501", # collapsible-else-if; Preserve readability of TODO block in
               # `convert` method

    "A001",
    "A002",
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN201",
    "ANN202",
    "ANN204",
    "ANN205",
    "ANN206",
    "ARG001",
    "ARG002",
    "ARG003",
    "ARG004",
    "B028",
    "C408",
    "C901",
    "D100",
    "D101",
    "D102",
    "D103",
    "D105",
    "D200",
    "D205",
    "D401",
    "DTZ002",
    "E501",
    "EM101",
    "ERA001",
    "FIX002",
    "ICN001",
    "N801",
    "N802",
    "NPY002",
    "PLR0912",
    "PT009",
    "PT027",
    "RET503",
    "S101",
    "SIM102",
    "SIM108",
    "TD002",
    "TD003",
    "TD004",
    "TRY003",
    "TRY004",
    "UP008",
]

preview = false
select = [
    "ALL",
    # list specific rules to include that is skipped using numpy convention.
    "D212",  # Multi-line docstring summary should start at the first line
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
# Change to match specific package name:
known-first-party = ["nc_time_axis"]

[tool.ruff.lint.per-file-ignores]
# All test scripts
"src/nc_time_axis/tests/*.py" = [
  "D104",  # Missing docstring in public package
  "N999",  # Invalid module name
]

"docs/conf.py" = [
  "INP001", # implicit namespace
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"